[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "frame-bridge"
version = "1.0.0"
description = "AI-powered video frame bridging application using SSIM technology"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Sunwood AI Labs", email = "info@sunwood-ai-labs.com"}
]
maintainers = [
    {name = "Sunwood AI Labs", email = "info@sunwood-ai-labs.com"}
]
keywords = [
    "video-processing",
    "ai",
    "computer-vision",
    "gradio",
    "opencv",
    "ssim",
    "frame-analysis",
    "video-editing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Video :: Display",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
]
requires-python = ">=3.10"
dependencies = [
    "opencv-python>=4.8.0",
    "numpy>=1.24.0",
    "pillow>=10.0.0",
    "gradio>=5.42.0",
    "scikit-image>=0.21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/Sunwood-ai-labsII/frame-bridge"
Repository = "https://github.com/Sunwood-ai-labsII/frame-bridge.git"
Documentation = "https://github.com/Sunwood-ai-labsII/frame-bridge#readme"
"Bug Tracker" = "https://github.com/Sunwood-ai-labsII/frame-bridge/issues"
"Demo Site" = "https://huggingface.co/spaces/MakiAi/frame-bridge"

[project.scripts]
frame-bridge = "app:main"
frame-bridge-test = "test_sample:main"
frame-bridge-batch = "batch_test:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", ".github*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "setup.py",
    "*/site-packages/*",
    ".venv/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
]